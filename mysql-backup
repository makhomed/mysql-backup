#!/usr/bin/python3 -u

__contact__ = 'https://github.com/makhomed/mysql-backup'
__license__ = 'GNU General Public License v3.0 or later'
__version__ = '1.2.4'

import datetime
import secrets
import shutil
import sys
import time
from pathlib import Path

from invoke import run


BACKUPS_SAVE_DAYS = 7
SYSTEM_DUMP = '/dump'
STORE_BACKUPS_DIR = '/srv/mysql-backup'
is_system_dump_mountpoint = Path(SYSTEM_DUMP).is_dir() and SYSTEM_DUMP in run('findmnt -n -l -o TARGET', hide=True).stdout.strip().splitlines()
SQL_DUMP_TEMP_DIR = f'{STORE_BACKUPS_DIR}/tmp-sql-dump-dir-tmp' if not is_system_dump_mountpoint else f'{SYSTEM_DUMP}/tmp-sql-dump-dir-tmp'


def atomic_write_text(content, filename):
    assert isinstance(content, str)
    assert isinstance(filename, Path)
    tmp_filename = filename.with_name(filename.name + '.tmp.' + secrets.token_hex() + '.tmp')
    tmp_filename.write_text(content)
    tmp_filename.rename(filename)


def databases():
    return [database for database in run('/usr/bin/mysql --batch --skip-column-names --execute="SHOW DATABASES;"', hide=True).stdout.strip().splitlines()
            if database not in ('information_schema', 'performance_schema', 'mysql', 'sys')]


def disable_slow_query_log():
    run('/usr/bin/mysql --batch --execute="SET @@global.slow_query_log=OFF;"')


def enable_slow_query_log():
    run('/usr/bin/mysql --batch --execute="SET @@global.slow_query_log=ON;"')


def dump_grants(grants_dump_filename):
    atomic_write_text(run('/usr/bin/pt-show-grants', hide=True).stdout, grants_dump_filename)


def dump_database(database, database_dump_filename):
    options = '--opt --skip-lock-tables --single-transaction --force --hex-blob --events --routines --triggers'
    run(f'/usr/bin/mysqldump {options} --result-file={database_dump_filename} {database}')


def delete_old_backups(store_backups_dir, backups_save_days):
    for entry in list(store_backups_dir.iterdir()):
        if not entry.is_file():
            continue
        mtime = entry.stat().st_mtime
        now = time.time()
        if now - mtime > 60 * 60 * 24 * backups_save_days:
            entry.unlink()


def backup():
    now = datetime.datetime.now().strftime('%Y-%m-%d-%H%M%S')
    backups_save_days = int(BACKUPS_SAVE_DAYS)
    store_backups_dir = Path(STORE_BACKUPS_DIR)
    store_backups_dir.mkdir(mode=0o700, parents=True, exist_ok=True)
    sql_dump_temp_dir = Path(SQL_DUMP_TEMP_DIR)
    sql_dump_temp_dir.mkdir(mode=0o700, parents=True, exist_ok=True)
    temp_dir = sql_dump_temp_dir / f'{now}-mysqldump.tmp.{secrets.token_hex()}.tmp'
    temp_dir.mkdir(mode=0o700, parents=True, exist_ok=True)
    dump_dir_basename = f'{now}-mysqldump'
    work_dir = temp_dir / dump_dir_basename
    work_dir.mkdir(mode=0o700, parents=True, exist_ok=True)
    archive_basename = f'{now}-mysqldump.tar.xz'
    archive_filename = temp_dir / archive_basename

    disable_slow_query_log()
    grants_dump_filename = work_dir / f'{now}-grants.sql'
    dump_grants(grants_dump_filename)
    for database in databases():
        now = datetime.datetime.now().strftime('%Y-%m-%d-%H%M%S')
        database_dump_filename = work_dir / f'{now}-mysqldump-{database}.sql'
        dump_database(database, database_dump_filename)
    enable_slow_query_log()

    run(f'/usr/bin/tar --xz --create --directory={temp_dir} --file={archive_filename} {dump_dir_basename}')
    archive_destination_filename = store_backups_dir / archive_basename
    shutil.move(archive_filename, archive_destination_filename)

    shutil.rmtree(work_dir)
    temp_dir.rmdir()
    if bool(len(list(sql_dump_temp_dir.iterdir()))):
        names = '\n'.join([str(entry) for entry in sql_dump_temp_dir.iterdir()])
        print(f'\n\nWARNING!!! {sql_dump_temp_dir} directory is not empty:\n\n{names}\n\n')
    else:
        sql_dump_temp_dir.rmdir()
    delete_old_backups(store_backups_dir, backups_save_days)


def main():
    backup()


if __name__ == '__main__':
    main()
